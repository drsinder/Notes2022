@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager
@inject HttpClient Http
@inject AuthenticationStateProvider AuthProv
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

<AuthorizeView>
    <Authorized> 
        <SfButton @onclick="GotoProfile" class="logbutton">@context.User.Identity?.Name</SfButton>
        <SfButton @onclick="BeginSignOut" class="logbutton">Log out</SfButton>
        <SfButton @onclick="GotoHome" class="homebutton">Home</SfButton>
    </Authorized>
    <NotAuthorized>
        <SfButton @onclick="GotoRegister" class="logbutton">Register</SfButton>
        &nbsp;&nbsp;<SfButton @onclick="GotoLogin" class="logbutton">Login</SfButton>&nbsp;&nbsp;
        <SfButton @onclick="GotoHome" class="homebutton">Home</SfButton>
    </NotAuthorized>
</AuthorizeView>

<style>
    .logbutton{
        color: white;
        background-color: darkcyan;
        margin-right: 5px;
        margin-left: 5px;
        border-radius: 6px;
    }

    .logbutton:hover{
        color: white;
        background-color: blue;
    }
    .homebutton{
        color: white;
        background-color: darkblue;
        margin-right: 5px;
        margin-left: 5px;
        border-radius: 6px;
    }

    .homebutton:hover{
        color: white;
        background-color: blue;
    }
</style>

@code{

    //protected string UserName { get; set; }

    //protected override async Task OnParametersSetAsync()
    //{
    //    AuthenticationState authstate = await AuthProv.GetAuthenticationStateAsync();
    //    if (authstate.User.Identity.IsAuthenticated && Globals.EditUserVModel == null)
    //    {
    //        UserData udata = await Http.GetFromJsonAsync<UserData>("api/User");
    //        string uid = udata.UserId;
    //        Globals.UserData = udata;
    //        Globals.EditUserVModel = await Http.GetFromJsonAsync<EditUserViewModel>("api/UserEdit/" + uid);
    //    }
    //    else
    //    {
    //        Globals.EditUserVModel = null;
    //    }
    //    if (authstate.User.Identity.IsAuthenticated)
    //    {
    //        UserName = Globals.EditUserVModel.UserData.DisplayName;
    //    }
    //    this.StateHasChanged();
    //}

    private async Task BeginSignOut()
    {
        Globals.RolesValid = false;
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }

    private void GotoProfile()
    {
        Navigation.NavigateTo("authentication/profile");
    }

    private void GotoRegister()
    {
        Navigation.NavigateTo("authentication/register");
    }

    private void GotoLogin()
    {
        Globals.RolesValid = false;
        Navigation.NavigateTo("authentication/login");
    }

    private void GotoHome()
    {
        Navigation.NavigateTo("/");
    }
}
