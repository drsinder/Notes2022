@page "/test"


<code class="language-css">p { color: green }</code>

<pre><code class="language-css">p { color: green }</code></pre>


<pre><code class="language-csharp">
using Microsoft.AspNetCore.Components;
using Notes2022.Shared;
using Syncfusion.Blazor.Grids;

namespace Notes2022.Client.Pages.User.Panels
{
    public partial class Responses
    {
        [Parameter] public bool ShowContentR { get; set; }
        [Parameter] public bool ExpandAllR { get; set; }

        public bool ShowContent { get; set; }
        public bool ExpandAll { get; set; }



        [Inject] NavigationManager Navigation { get; set; }
        public Responses()
        {
        }

        protected override async Task OnInitializedAsync()
        {
            ShowContent = ShowContentR;
            ExpandAll = ExpandAllR;
        }

        public void DataBoundHandler()
        {
            if (ExpandAll)
            {
                sfGrid2.ExpandAllDetailRowAsync();
            }
        }

        private async void ExpandAllChange(Syncfusion.Blazor.Buttons.ChangeEventArgs bool arg)
        {
            if (ExpandAll)
            {
                await sfGrid2.ExpandAllDetailRowAsync();
            }
            else
            {
                await sfGrid2.CollapseAllDetailRowAsync();
            }
        }
        protected void DisplayIt(RowSelectEventArgsNoteHeader args)
        {
            Navigation.NavigateTo("notedisplay/" + args.Data.Id);
        }
    }
}


</code></pre>



@*
@using Syncfusion.Blazor.Inputs 


<h3>Test</h3>
 
@message 

<SfTextBox @bind-Value="@val" @onkeyup="@KeyPressHandler" Input="@NavInputHandler" ></SfTextBox> 
 
<br /> 
<br /> 
<button @onclick="clickAction">Clear All</button> 
 
@code {

    public string val { get; set; }

    //private string NavCurrentVal { get; set; }
    private string message { get; set; }


    public void clickAction()
    {
        this.val = null;
    }

    private async Task KeyPressHandler(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            // process  val and clear input
            //NavCurrentVal = null;
            this.val = null;
        }

        val = null;

        await Task.CompletedTask; 
    }
    private async void NavInputHandler(InputEventArgs args)
    {
        //NavCurrentVal = args.Value;

        //switch (args.Value)
        //{

        //    case "Z":
        //        message = "Z pressed";
        //        //this.NavCurrentVal = null;
        //        this.val = args.Value;
        //        break;

        //    default:
        //        break;
        //}
        this.val = args.Value;
        await Task.CompletedTask; 
    }
}
*@

